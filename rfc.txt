                                                               L. Calvis
                                                               E. Chebbi
                                                               R. Cros
                                                               M. Lannes
                                                               
                    Dog is Not a Cat Protocol (DNC)                    

Status of this Memo

   This memo describes the DNC protocol, which allows several clients to
   connect to a DNC server, and a DNC server to discuss with its clients
   through a TCP connection.
   
Abstract

   This memo is dedicated to the people who would implement a DNC server 
   or client.

Table of Contents
	
	I - Introduction....................................................
	   1. Glossary......................................................
	      1.a Client....................................................
	      1.b Message...................................................
	      1.c Request...................................................
	      1.d Reply.....................................................
	      1.e Server....................................................
	II - The DNC Specification..........................................
	   1. Overview......................................................
	   2. Character encoding............................................
	   3. Messages......................................................
	      3.a Message format............................................
	      3.b Reply format..............................................
	III - Command details...............................................
	   1. Connection Registration.......................................
	      1.a CONNECT command...........................................
	      1.b QUIT command..............................................
	   2. Communication between clients.................................
	      2.a MESSAGE command...........................................
	      2.b ASK_WHISPER command.......................................
	      2.c REPLY_WHISPER command.....................................
	      2.d WHISPER command...........................................
	   3. File transfer.................................................
	      3.a ASK_FILE command..........................................
	      3.b REPLY_FILE command........................................
	   4. Client's status management....................................
	      4.a NICK command..............................................
	      4.b AWAY command..............................................
	      4.c RE command................................................
	   5. Operations on server..........................................
	      5.a NAMES command.............................................
	IV - Error handling.................................................
	   1. Server error..................................................
	   2. Client disconnection..........................................
	V - Responses.......................................................
	   1. Status codes..................................................
	   2. Error messages................................................
	   3. Command replies...............................................

I - Introduction

   DNC is a protocol built on the top of TCP. It allows several clients
   to discuss through a common server.
   
   1. Glossary
   
      1.a Client
   
         A client is all that can establish a connection with a server. 
         Each client is identified by a unique pseudonym, which has a
         maximum length of ten (10) characters.
         
      1.b Message
      
         In this document, this term is used to describe the content of
         a socket sent by either a client or a server.
         
      1.c Request
      
         A request is a special message in which the sender asks the 
         recipient to do something or to return an information.
         
      1.d Reply
     
     	A reply is a special message that contains the response of a
     	request.

      1.e Server
   
         Servers are aimed to handle clients' requests and to forward    
         messages to others clients.
   
II - The DNC Specification

   1. Overview
   
   2. Character encoding
   
      All messages between servers and clients must be encoded in UTF-8
      format. The maximum length of a message is of 2048 bytes.
   
   3. Messages
   
      Both clients and servers can send messages to each other, which
      may generate a reply.
      
      In the formats presented below, a parameter surrounded by chevrons
      (<>) is a variable. A parameter surrounded by brackets ([]) is
      optional. A parameter followed by three suspension points (...) 
      can be specified several times. Any other character is a literal 
      string and must be kept as it is.
      
      3.a Message format
      
         The exact format of the request depends on whether the sender
         is the client or the server. That said, it is essentially the 
         same, with only one little difference.
         
         When a client wants to send a message to a server, it has to
         respect the following format:
         <COMMAND> [<argument> ...]
         
         <COMMAND> refers to an existing command ; all commands are
         described within the "Command details" paragraph. A command can
         be followed by zero, one or more arguments. Commands and 
         arguments must be separated by a unique space.
         
         When the server wants to send a message to a client, it follows
         roughly the same syntax, except that the first element of the 
         request is the pseudonym of the client prefixed by a colon (:),
         as below:
         :<sender_pseudonym> <COMMAND> [<argument> ...]
         
         If the sender is the server, then the sender's pseudonym is 
         "@server". That's why clients are not allowed to choose this as
         a pseudonym (see "NICK command").
         
         Examples of commands are presented in the next paragraph.
         
      3.b Reply format
      
         Replies' format is the same, no matter who the sender is.
         It is described below:
         <status_code> <status_name> [<human_readable_message>]
         
         - status_code is a three-digit number which identifies
         the nature of the answer. 
         
         - status_name is a short name describing the nature of the
         answer.
         
         - human_readable_message is a message that can be read by a
         human and that describes the reply in more details.
         
         For a further explanation about these three items, please see
         the "Responses" paragraph.
         
      When a message is received, one can easily tell whether it is a 
      reply or a request : if the message starts by a colon (:), then it
      is a request whose sender is the pseudonym after the colon. 
      Otherwise, it is a reply.
   
III - Command details

   1. Connection Registration
   
      1.a CONNECT command
      
         Command: CONNECT
         Arguments: <pseudonym>
      
         The first command that must be sent to the server in order to
         log in.
         
         When a client logs in, the server must send a message to all 
         the other clients in order to let them known that someone just
         logged in.
         
         Restrictions:
         
            All the restrictions of the NICK command also apply here.
            
            Moreover, a client that uses CONNECT must not be already
            connected.
         
         Possible answers:
         
            All the answers of the NICK command.
         
            ERR_ALREADYCONNECTED
            
         Examples:
         
            CONNECT Sapin     ; a client attempts to log in as "Sapin"
            100 RPL_DONE      ; this is the server's response
            :Sapin CONNECT    ; this is sent to the other clients
                                to inform them of the new user
      
      1.b QUIT command
      
         Command: QUIT
         Arguments: [<quit_message>]
         
         Ends a client session. When receiving this message, the server
         must close the connection to the client. If a <quit_message> is
         specified, it will be transmitted to the other clients.
         
         If the client is connected, the connection is closed and no
         response is sent from the server.
         
         Restrictions:
         
            The client must already be logged in.
            
         Possible answers:
         
            ERR_NOTCONNECTED
         
         Examples: 
         
            QUIT           ; client "Sapin" wants to end the connection
            :Sapin QUIT    ; received by all the other clients 
      
   2. Communication between clients
   
      2.a MESSAGE command
      
         Command: MESSAGE
         Arguments: <message>
         
         Sends a message to all the other connected clients.
         
         Restrictions:
         
            The client must be logged in.
            
         Possible answers:
         
            ERR_NOTCONNECTED     ERR_NOTENOUGHARGS
            ERR_BADSTATUS
         
         Examples:
         
            MESSAGE Hello all!         ; client "Sapin" sends a message
            100 RPL_DONE               ; the response from the server
            :Sapin MESSAGE Hello all!  ; received by other clients
            
      2.b ASK_WHISPER command
      
         Command: ASK_WHISPER
         Arguments: <pseudonym>
         
         Asks a client to start a private conversation.
         When a private conversation has started between two clients,
         then they can use the WHISPER command in order to send to
         each other messages that will not be delivered to others
         clients.
         
         When a client receives a ASK_WHISPER request, he is supposed
         to reply with a REPLY_WHISPER request.
         
         Possible answers:
         
            ERR_NOTCONNECTED   ERR_NOTENOUGHARGS
            ERR_NICKNAMENOTEXIST
         	
     	Examples:
     	
     		ASK_WHISPER joe		; jack wants to whisper to joe
     		100 RPL_DONE		; the response from the server
     		:jack ASK_WHISPER	; the message received by joe
     		
 	  2.c REPLY_WHISPER command
 	  
 	     Command: REPLY_WHISPER
 	     Arguments: <pseudonym> YES|NO
 	     
 	     This method is used to make a reply after that a ASK_WHISPER
 	     has been received from the client <pseudonym>.
 	     
 	     The argument must be either "YES" if the sender accepts to 
 	     start a private conversation with <pseudonym>, or "NO" if
 	     he doesn't. The case of "YES" and "NO" is not relevant.
 	     
 	     Possible answers:
 	     
 	        ERR_NOTCONNECTED      ERR_NOTENOUGHARGS
 	        ERR_NICKNAMENOTEXIST  ERR_BADARGUMENT
 	        
 	     Examples: 
     	
     		ASK_WHISPER joe		   ; jack wants to whisper to joe
     		100 RPL_DONE		   ; the server respond to jack
     		:jack ASK_WHISPER	   ; the message received by joe
     		REPLY_WHISPER jack YES ; joe has accepted the proposition
     		100 RPL_DONE		   ; the server respond to joe
     		:joe REPLY_WHISPER YES ; jack receives joe's answer 
     		
      2.d WHISPER command
      
         Command: WHISPER
         Arguments: <pseudonym> <message>
         
         Sends a private message to <pseudonym>.
         
         A private message can be sent to <pseudonym> only if a
         ASK_WHISPER command has previously be sent and accepted
         by him. 
         
         Possible answers: 
            
            ERR_NOTCONNECTED     ERR_NICKNAMENOTEXIST
            ERR_NOTENOUGHARGS	 ERR_WHISPERNOTALLOWED
            
         Examples:
         
            WHISPER jack Hello, jack   ; "joe" sends a private message
            100 RPL_DONE               ; response from the server
            :joe WHISPER Hello, jack   ; "jack" is the only one who 
                                         received this
                                         
      2.e STOP_WHISPER command
      
         Command: STOP_WHISPER
         Arguments: <pseudonym>
         
         Stops the private conversation initiated with <pseudonym>.
         
         Once this command has been sent, no private message can be
         either sent or received from <pseudonym> anymore.
         
         Possible answers:
         
            ERR_NOTCONNECTED       ERR_NOTENOUGHARGS
            ERR_NICKNAMENOTEXIST   
            
        Examples:
     	
     		ASK_WHISPER joe		   ; jack wants to whisper to joe
     		100 RPL_DONE		   ; the server respond to jack
     		:jack ASK_WHISPER	   ; the message received by joe
     		REPLY_WHISPER jack YES ; joe has accepted the proposition
     		100 RPL_DONE		   ; the server respond to joe
     		:joe REPLY_WHISPER YES ; jack receives joe's answer
     		...                    ; some messages are sent 
        	STOP_WHISPER joe       ; jack wants to stop whispering
        	100 RPL_DONE           ; the response from the server
        	:jack STOP_WHISPER     ; joe knows that he can't whisper
        	WHISPER jack really ?  ; joe attempts to whisper anyway
        	207 ERR_WHISPERNOTALLOWED ; and gets rejected
      
   3. File transfer
         
      3.a ASK_FILE command
      
         Command: ASK_FILE
         Arguments: <recipient> <file_size> <file_name>
         
         This command can be used by a client in order to send a file
         to another one.
         
         The size of the file must be specified in bytes.
         
         Once received by the server, a unique id will be generated to
         identify the request, which is then broadcast to <recipient>
         in the following format:
         
         :sender ASK_FILE <id> <file_size> <file_name>
         
         The id makes possible to send different files with both the
         same name and length.
         
         The recipient can then respond thanks to the REPLY_FILE
         command.
         
         Possible answers:
         
             ERR_NOTCONNECTED   ERR_NICKNAMENOTEXIST
             ERR_NOTENOUGHARGS
             
         Examples:
         
            ASK_FILE joe 400 truc.txt   ; jack attempts to send a file
            102 RPL_FILE azEr4          ; the server responds with the
                                          id of the request
            :jack ASK_FILE azEr4 400 truc.txt ; received by joe
   
      3.b REPLY_FILE command
      
         Command: REPLY_FILE
         Arguments: <request_id> YES|NO [<port>]
         
         This command is aimed to reply to a ASK_FILE request.
         
         If the client accepts to receive the file identified by 
         <request_id>, he must respond "YES", or "NO" otherwise. The 
         case is not relevant.
       
         If the answer is "YES", then the sender must start an UDP
         connection with the recipient. The ip address of the recipient
         will be provided by the server, while the port is directly
         specified by the file receiver.
         
         Finally, if the recipient accepts to download the file, the 
         the message received by the client who wants to send the file
         is of the following format:
         
         :<file_receiver> REPLY_FILE <id> YES <port> <ip>
         
         Possible answers:
         
            ERR_NOTCONNECTED   ERR_NICKNAMENOTEXIST
            ERR_NOTENOUGHARGS
            
         Examples:
         
            ASK_FILE joe 400 truc.txt   ; jack attempts to send a file
            102 RPL_FILE azEr4          ; the server responds with the
                                          id of the request
            :jack ASK_FILE azEr4 400 truc.txt ; received by joe
            
            REPLY_FILE azEr4 YES 8456 ; joe accepts to receive the file
                                        on the port 8456
            100 RPL_DONE              ; response from the server
            
            :joe REPLY_FILE YES 8456 192.168.1.1 ; received by jack
         
   
   4. Client's status management
   
      4.a NICK command
      
         Command: NICK
         Arguments: <pseudonym>
         
         Changes the current pseudonym of the client to <pseudonym>.
         
         Restrictions:
         
            The maximum length of the pseudonym is of 10 characters, and
            it cannot start by an "at" symbol (@).
            
            Moreover, the name cannot contain a comma (,).
            
            Finally, since the character space ( ) is used to separate
            arguments, please notice that a pseudonym cannot contain
            one. Hence, if several arguments are specified for the NICK
            command, only the first one will be used as the new
            pseudonym. 
         
         Possible answers:
         
            ERR_NOTCONNECTED     ERR_NOTENOUGHARGS
            ERR_NICKNAMEINUSE    ERR_INVALIDNICKNAME
            
         Examples:
         
            NICK Sb Arf       ; client "Sapin" asks to be renamed as 
                                "Sb"
            100 RPL_DONE      ; response from the server
            :Sapin NICK Sb    ; received by other clients
      
      4.b AWAY command
      
         Command: AWAY
         No argument
         
         Specifies that the client cannot send messages (through 
         MESSAGE) anymore, but can still receive them.
         
         This command can be canceled thanks to the RE command.
         
         Possible answers:
         
            ERR_NOTCONNECTED
            
         Examples:
         
            AWAY                 ; the client asks to be away
            100 RPL_DONE         ; response from server
         
      4.c RE command
      
         Command: RE
         No argument
         
         This command cancels the effect of the AWAY command.
         
         Specifies that the client is active again. It can now send
         messages again using the MESSAGE command.
         
         Possible answers:
         
            ERR_NOTCONNECTED     ERR_BADSTATUS
            
         Examples:

            RE                      ; the client asks to come back
            202 ERR_BADSTATUS       ; error: the client wasn't away
      
   5. Operations on server
   
      5.a NAMES command
      
         Command: NAMES
         No argument
         
         Asks the list of clients to the server. The associated response 
         returns the pseudonyms separated by a space.
         
         Possible answers:
         
            ERR_NOTCONNECTED
            
         Examples:
         
            LIST                    ; the client asks others' name
            101 RPL_NAMES jack joe  ; jack and joe are connected 
            
            
IV - Error handling

   1. Server error
   
      If an internal error, which means an error that has not be caused
      by the client (out of memory, deadlocks, etc.), occurs while
      executing a client's request and makes the server unable to 
      complete processing, then the server must reply 
      "ERR_INTERNALERROR".
   
   2. Client disconnection
   
      If a client sessions ends abruptly, the server must executes a
      QUIT command, which means send :<pseudo> QUIT to all other
      connected clients. 
            
      
V - Responses

   1. Status codes
   
      A status code is a three-digit number that indicates the nature of
      the response.
      
      The first digit corresponds to the class of the response. The 
      latter two identify the precise answer. The available classes are
      the following:
      
      - 1xx (Successful): The request was successfully received, 
      understood and processed.
      
      - 2xx (Error): The request contains bad syntax or cannot be 
      fulfilled.

   2. Error messages
   
      This paragraph presents all the error messages, and their
      corresponding status code as well.
      
      +------+-----------------------+--------------------------------+
      | Code |     Status name       |          Explanation           |
      +------+--------------------------------------------------------+
      | 200  | ERR_ALREADYCONNECTED  | The client is already connected|
      | 201  | ERR_NOTCONNECTED      | The client is not connected    |
      | 202  | ERR_BADSTATUS         | The status of the client, such |
      |      |                       | as AWAY, forbade the request   |
      | 203  | ERR_NOTENOUGHARGS     | The request has not enough args|
      | 204  | ERR_NICKNAMENOTEXIST  | Requested nick does not exist  |
      | 205  | ERR_NICKNAMEINUSE     | Requested nick is already used |
      | 206  | ERR_INVALIDNICKNAME   | Requested nick is not valid    |
      | 207  | ERR_WHISPERNOTALLOWED | Whispering is not allowed      |
      | 208  | ERR_BADARGUMENT       | The arguments are not conformed|
      | 298  | ERR_MALFORMEDREQUEST  | Request could not be recognized|
      [ 299  | ERR_INTERNALERROR     | An internal error occurred     |
      +------+-----------------------+--------------------------------+
   
   3. Command replies
   
      This paragraph presents all the possible answers to a successful
      request.
      
      +------+-----------------------+--------------------------------+
      | Code |     Status name       |          Explanation           |
      +------+--------------------------------------------------------+
      | 100  | RPL_DONE              | Success                        |
      | 101  | RPL_NAMES             | Returns a list of pseudos      |
      | 102  | RPL_FILE              | Returns the id of the request  |
      +------+-----------------------+--------------------------------+
